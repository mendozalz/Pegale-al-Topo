@page "/"
<h1>Pegale al Topo</h1>
<div class="subtitle">
    <h2>Puntaje: @score</h2>
    <h2>Tiempo restante: @life</h2>
</div>
<div class="info">
    <h2>@mensaje</h2>
</div>

<div class="reiniciar">
    @if (!gameRun)
    {
        <button class="btnReiniciar" @onclick="ReiniciarJuego">Reiniciar Juego</button>
    }
</div>
<div class="board">
    @foreach(var s in Squares)
    {
        <BlazorGame.Components.Square SquareModels="s" mouseClick="()=> TopoClick(s)" />
    }
</div>
<div class="small">
<p>Mendozalz</p>
</div>
<div class="img-logos">
    <img class="c_sharp" src="../img/c_shap.png" />
    <img class="blazor" src="../img/Blazor.png" />
    <img class="webassembly"  src="../img/WebAssembly.png" />
    <img class="pwa"  src="../img/pwa.png" />
</div>

@code{
        PeriodicTimer gameLoopTimer;
        PeriodicTimer gameTimeTimer;
    private void TopoClick(SquareModels s)
    {

        if (gameRun)
        {
            if(s.Id == hitPosition)
            {
                score += 1;
            }
        }
    }

    private Random random = new Random();
    int? lastPosition = null;

    private void nextTopo()
    {
        foreach(var i in Squares)
        {
            i.IsShow = false;
        }

        // Esto con el fin de evitar que el topo se quede en una sola posición estancado

        int randomPosition;

        do
        {
            randomPosition = random.Next(0, 9);
        } while (lastPosition == randomPosition);

        Squares[randomPosition].IsShow = true;

        hitPosition = randomPosition;

        lastPosition = randomPosition;

        StateHasChanged();
    }

    private async Task GameLoopAsync(PeriodicTimer timer)
    {
        while (gameRun)
        {
            nextTopo();
            await timer.WaitForNextTickAsync();
        }
    }

    private async Task GameFinish(PeriodicTimer time)
    {
        while (gameRun)
        {
            life--;
            if(life == 0)
            {
                mensaje = "Juego finalizado!!!";
                gameRun = false;
            }
            StateHasChanged();
            await time.WaitForNextTickAsync();
        }

    }

    protected override void OnInitialized()
    {
        gameLoopTimer = new PeriodicTimer(TimeSpan.FromMilliseconds(velocidadJuego));

        _ = GameLoopAsync(gameLoopTimer);
        
        gameTimeTimer = new PeriodicTimer(TimeSpan.FromSeconds(1));

        _ = GameFinish(gameTimeTimer);
    }
    
}